import os
import instaloader
import cv2  # –î–ª—è —á—Ç–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –≤–∏–¥–µ–æ
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, MessageHandler, CommandHandler, CallbackQueryHandler, filters, ContextTypes
from server import keep_alive  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä

# Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = "7648873218:AAHgzpTF8jMosAsT2BFJPyfg9aU_sfaBD9Q"
GROUP_CHAT_ID = -1002055756304  # ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Instaloader
loader = instaloader.Instaloader()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_languages = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∏–ª—Å–æ–≤
def download_reel(url):
    try:
        post = instaloader.Post.from_shortcode(loader.context, url.split("/")[-2])
        loader.download_post(post, target="reels")
        for file in os.listdir("reels"):
            if file.endswith(".mp4"):
                return os.path.join("reels", file)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∏–ª—Å–∞: {e}")
        return None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å—Å—ã–ª–∫–∞–º–∏
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    language = user_languages.get(user_id, "ru")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π

    loading_message_text = {
        "ru": "–ó–∞–≥—Ä—É–∂–∞—é —Ä–∏–ª—Å, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        "en": "Downloading reel, please wait...",
        "vi": "ƒêang t·∫£i video, vui l√≤ng ƒë·ª£i..."
    }.get(language, "–ó–∞–≥—Ä—É–∂–∞—é —Ä–∏–ª—Å, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    error_message_text = {
        "ru": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.",
        "en": "Failed to download the video. Please check the link.",
        "vi": "Kh√¥ng th·ªÉ t·∫£i video. Vui l√≤ng ki·ªÉm tra li√™n k·∫øt."
    }.get(language, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.")

    user_sent_text = {
        "ru": "–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {user_name}",
        "en": "Video sent by user: {user_name}",
        "vi": "Video ƒë∆∞·ª£c g·ª≠i b·ªüi ng∆∞·ªùi d√πng: {user_name}"
    }.get(language, "–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {user_name}")

    print(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update}")

    if not update.message:
        print("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return

    url = update.message.text.strip()
    user_name = update.effective_user.first_name

    if "instagram.com/reel/" in url or "instagram.com/p/" in url:
        loading_message = await update.message.reply_text(loading_message_text)
        print("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫—É...")
        video_path = download_reel(url)
    else:
        print("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å—Å—ã–ª–∫–∞")
        return

    if video_path:
        try:
            cap = cv2.VideoCapture(video_path)
            width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
            height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
            cap.release()

            print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ —á–∞—Ç...")
            caption_text = user_sent_text.format(user_name=user_name)
            await context.bot.send_video(
                chat_id=update.effective_chat.id,
                video=open(video_path, 'rb'),
                width=width,
                height=height,
                supports_streaming=True,
                caption=caption_text
            )
            await loading_message.delete()
            os.remove(video_path)
            if update.message:
                await update.message.delete()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {e}")
            if loading_message:
                await loading_message.edit_text(error_message_text)
    else:
        if loading_message:
            await loading_message.edit_text(error_message_text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose your language / Ch·ªçn ng√¥n ng·ªØ:",
        reply_markup=language_keyboard(update.effective_user.id)
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —è–∑—ã–∫–∞
def language_keyboard(user_id):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data=f"lang_ru_{user_id}")],
        [InlineKeyboardButton("English", callback_data=f"lang_en_{user_id}")],
        [InlineKeyboardButton("Ti·∫øng Vi·ªát", callback_data=f"lang_vi_{user_id}")]
    ])
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
async def language_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query

    if not query or not query.id:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π callback query")
        return

    try:
        await query.answer()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ callback query: {e}")
        return

    data = query.data.split("_")
    lang = data[1]
    user_id = int(data[2])

    if lang == "ru":
        user_languages[user_id] = "ru"
        instruction = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\\n\\n"
            "–Ø ‚Äî –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∏–ª—Å–æ–≤ –∏–∑ Instagram –ø—Ä—è–º–æ –≤ Telegram. üì≤\\n\\n"
            "üí° **–ö–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é?**\\n"
            "1Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∏–ª—Å –∏–∑ Instagram.\\n"
            "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤ —ç—Ç–æ—Ç —á–∞—Ç –∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª, –≥–¥–µ —è –¥–æ–±–∞–≤–ª–µ–Ω.\\n"
            "3Ô∏è‚É£ –Ø –∑–∞–≥—Ä—É–∂—É –≤–∏–¥–µ–æ –∏ –ø—Ä–∏—à–ª—é –µ–≥–æ –≤ –≤–∞—à—É –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª.\\n\\n"
            "üõ† **–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª?**\\n"
            "1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª.\\n"
            "2Ô∏è‚É£ –ù–∞–∑–Ω–∞—á—å—Ç–µ –º–µ–Ω—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\\n"
            "3Ô∏è‚É£ –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π —Ä–∏–ª—Å–æ–≤! üéâ\\n\\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: [vanyaaronov@gmail.com](mailto:vanyaaronov@gmail.com). –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –º–µ–Ω—è! üòä"
        )
    elif lang == "en":
        user_languages[user_id] = "en"
        instruction = (
            "üëã Welcome!\\n\\n"
            "I am your assistant for downloading Instagram reels directly to Telegram. üì≤\\n\\n"
            "üí° **How do I work?**\\n"
            "1Ô∏è‚É£ Copy the link to a reel from Instagram.\\n"
            "2Ô∏è‚É£ Send the link to this chat or a group/channel where I am added.\\n"
            "3Ô∏è‚É£ I will download the video and send it to your group or channel.\\n\\n"
            "üõ† **How to add me to a group or channel?**\\n"
            "1Ô∏è‚É£ Add me to the group/channel.\\n"
            "2Ô∏è‚É£ Make me an admin.\\n"
            "3Ô∏è‚É£ Enjoy automatic reel downloads! üéâ\\n\\n"
            "If you have any questions or suggestions, contact the developer: [vanyaaronov@gmail.com](mailto:vanyaaronov@gmail.com). Thank you for choosing me! üòä"
        )
    elif lang == "vi":
        user_languages[user_id] = "vi"
        instruction = (
            "üëã Ch√†o m·ª´ng b·∫°n!\\n\\n"
            "T√¥i l√† tr·ª£ l√Ω c·ªßa b·∫°n ƒë·ªÉ t·∫£i video Reels t·ª´ Instagram tr·ª±c ti·∫øp v√†o Telegram. üì≤\\n\\n"
            "üí° **T√¥i ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o?**\\n"
            "1Ô∏è‚É£ Sao ch√©p li√™n k·∫øt t·ªõi video Reels t·ª´ Instagram.\\n"
            "2Ô∏è‚É£ G·ª≠i li√™n k·∫øt v√†o cu·ªôc tr√≤ chuy·ªán n√†y ho·∫∑c nh√≥m/k√™nh m√† t√¥i ƒë√£ ƒë∆∞·ª£c th√™m v√†o.\\n"
            "3Ô∏è‚É£ T√¥i s·∫Ω t·∫£i video v√† g·ª≠i n√≥ ƒë·∫øn nh√≥m ho·∫∑c k√™nh c·ªßa b·∫°n.\\n\\n"
            "üõ† **L√†m th·∫ø n√†o ƒë·ªÉ th√™m t√¥i v√†o nh√≥m ho·∫∑c k√™nh?**\\n"
            "1Ô∏è‚É£ Th√™m t√¥i v√†o nh√≥m/k√™nh.\\n"
            "2Ô∏è‚É£ ƒê·∫∑t t√¥i l√†m qu·∫£n tr·ªã vi√™n.\\n"
            "3Ô∏è‚É£ T·∫≠n h∆∞·ªüng vi·ªác t·∫£i video Reels t·ª± ƒë·ªông! üéâ\\n\\n"
            "N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi ho·∫∑c ƒë·ªÅ xu·∫•t n√†o, h√£y li√™n h·ªá v·ªõi nh√† ph√°t tri·ªÉn: [vanyaaronov@gmail.com](mailto:vanyaaronov@gmail.com). C·∫£m ∆°n b·∫°n ƒë√£ ch·ªçn t√¥i! üòä"
        )

    if query.message.text != instruction:
        await query.edit_message_text(instruction, parse_mode="Markdown", reply_markup=language_keyboard(user_id))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    print(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–π–º–∞–Ω–æ: {context.error}")
    if update and isinstance(update, Update):
        try:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    if not os.path.exists("reels"):
        os.makedirs("reels")

    keep_alive()  # –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ Render

    application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CallbackQueryHandler(language_callback, pattern=r"^lang_.*"))
    application.add_handler(MessageHandler(filters.TEXT & (filters.Chat(GROUP_CHAT_ID) | filters.ChatType.PRIVATE), handle_message))

    application.add_error_handler(error_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
    application.run_polling()  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ polling
