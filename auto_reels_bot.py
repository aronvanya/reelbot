import os
import instaloader
import cv2  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞–º–∏
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "7648873218:AAHgzpTF8jMosAsT2BFJPyfg9aU_sfaBD9Q")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Instaloader
loader = instaloader.Instaloader()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_languages = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∏–ª—Å–æ–≤
def download_reel(url):
    try:
        post = instaloader.Post.from_shortcode(loader.context, url.split("/")[-2])
        loader.download_post(post, target="reels")
        for file in os.listdir("reels"):
            if file.endswith(".mp4"):
                return os.path.join("reels", file)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∏–ª—Å–∞: {e}")
        return None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose your language / Ch·ªçn ng√¥n ng·ªØ:",
        reply_markup=language_keyboard(update.effective_user.id)
    )

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
def language_keyboard(user_id):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data=f"lang_ru_{user_id}")],
        [InlineKeyboardButton("English", callback_data=f"lang_en_{user_id}")],
        [InlineKeyboardButton("Ti·∫øng Vi·ªát", callback_data=f"lang_vi_{user_id}")]
    ])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
async def language_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    if not query or not query.id:
        return

    await query.answer()

    data = query.data.split("_")
    lang = data[1]
    user_id = int(data[2])

    if lang == "ru":
        user_languages[user_id] = "ru"
        instruction = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
            "–Ø ‚Äî –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∏–ª—Å–æ–≤ –∏–∑ Instagram –ø—Ä—è–º–æ –≤ Telegram. üì≤\n\n"
            "üí° –ö–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é:\n"
            "1Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∏–ª—Å –∏–∑ Instagram.\n"
            "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤ —ç—Ç–æ—Ç —á–∞—Ç –∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É.\n"
            "3Ô∏è‚É£ –Ø –∑–∞–≥—Ä—É–∂—É –≤–∏–¥–µ–æ –∏ –ø—Ä–∏—à–ª—é –µ–≥–æ –≤–∞–º –∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É. üéâ"
        )
    elif lang == "en":
        user_languages[user_id] = "en"
        instruction = (
            "üëã Welcome!\n\n"
            "I am your assistant for downloading Instagram reels directly to Telegram. üì≤\n\n"
            "üí° How I work:\n"
            "1Ô∏è‚É£ Copy the link to a reel from Instagram.\n"
            "2Ô∏è‚É£ Send the link to this chat or group.\n"
            "3Ô∏è‚É£ I will download the video and send it to you or the group. üéâ"
        )
    elif lang == "vi":
        user_languages[user_id] = "vi"
        instruction = (
            "üëã Ch√†o m·ª´ng b·∫°n!\n\n"
            "T√¥i l√† tr·ª£ l√Ω c·ªßa b·∫°n ƒë·ªÉ t·∫£i video Reels t·ª´ Instagram tr·ª±c ti·∫øp v√†o Telegram. üì≤\n\n"
            "üí° T√¥i l√†m vi·ªác th·∫ø n√†o:\n"
            "1Ô∏è‚É£ Sao ch√©p li√™n k·∫øt t·ªõi video Reels t·ª´ Instagram.\n"
            "2Ô∏è‚É£ G·ª≠i li√™n k·∫øt v√†o cu·ªôc tr√≤ chuy·ªán n√†y ho·∫∑c nh√≥m.\n"
            "3Ô∏è‚É£ T√¥i s·∫Ω t·∫£i video v√† g·ª≠i n√≥ cho b·∫°n ho·∫∑c nh√≥m. üéâ"
        )
    await query.edit_message_text(instruction)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å—Å—ã–ª–∫–∞–º–∏
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_type = update.effective_chat.type
    user_id = update.effective_user.id
    language = user_languages.get(user_id, "ru")

    loading_message = {
        "ru": "–ó–∞–≥—Ä—É–∂–∞—é —Ä–∏–ª—Å, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        "en": "Downloading reel, please wait...",
        "vi": "ƒêang t·∫£i video, vui l√≤ng ƒë·ª£i..."
    }.get(language, "–ó–∞–≥—Ä—É–∂–∞—é —Ä–∏–ª—Å, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    error_message = {
        "ru": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.",
        "en": "Failed to download the video. Please check the link.",
        "vi": "Kh√¥ng th·ªÉ t·∫£i video. Vui l√≤ng ki·ªÉm tra li√™n k·∫øt."
    }.get(language, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.")

    url = update.message.text.strip()
    if "instagram.com/reel/" in url or "instagram.com/p/" in url:
        message = await update.message.reply_text(loading_message)
        video_path = download_reel(url)
        if video_path:
            try:
                cap = cv2.VideoCapture(video_path)
                width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
                height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
                cap.release()

                caption = f"üé• –í–∏–¥–µ–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {update.effective_user.first_name}"
                await context.bot.send_video(
                    chat_id=update.effective_chat.id,
                    video=open(video_path, 'rb'),
                    width=width,
                    height=height,
                    supports_streaming=True,
                    caption=caption
                )
                await message.delete()
                os.remove(video_path)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {e}")
                await message.edit_text(error_message)
        else:
            await message.edit_text(error_message)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
def main():
    if not os.path.exists("reels"):
        os.makedirs("reels")

    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CallbackQueryHandler(language_callback, pattern=r"^lang_.*"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
    application.run_polling()

if __name__ == "__main__":
    main()
