import os
import logging
from flask import Flask, request
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TELEGRAM_TOKEN = "7648873218:AAHgzpTF8jMosAsT2BFJPyfg9aU_sfaBD9Q"
WEBHOOK_URL = "https://reelbot.onrender.com"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Telegram Bot Application
application = Application.builder().token(TELEGRAM_TOKEN).build()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_languages = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–Ø ‚Äî –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∏–ª—Å–æ–≤ –∏–∑ Instagram –ø—Ä—è–º–æ –≤ Telegram. üì≤\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose your language / Ch·ªçn ng√¥n ng·ªØ:",
        reply_markup=language_keyboard(update.effective_user.id)
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
def language_keyboard(user_id):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data=f"lang_ru_{user_id}")],
        [InlineKeyboardButton("English", callback_data=f"lang_en_{user_id}")],
        [InlineKeyboardButton("Ti·∫øng Vi·ªát", callback_data=f"lang_vi_{user_id}")]
    ])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
async def language_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    if not query or not query.id:
        return

    await query.answer()

    data = query.data.split("_")
    lang = data[1]
    user_id = int(data[2])

    if lang == "ru":
        user_languages[user_id] = "ru"
        instruction = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
            "üí° **–ö–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é:**\n"
            "1Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∏–ª—Å –∏–∑ Instagram.\n"
            "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤ —ç—Ç–æ—Ç —á–∞—Ç –∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É, –≥–¥–µ —è –¥–æ–±–∞–≤–ª–µ–Ω.\n"
            "3Ô∏è‚É£ –Ø –∑–∞–≥—Ä—É–∂—É –≤–∏–¥–µ–æ –∏ –ø—Ä–∏—à–ª—é –µ–≥–æ –≤–∞–º –∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É. üéâ"
        )
    elif lang == "en":
        user_languages[user_id] = "en"
        instruction = (
            "üëã Welcome!\n\n"
            "üí° **How I work:**\n"
            "1Ô∏è‚É£ Copy the link to a reel from Instagram.\n"
            "2Ô∏è‚É£ Send the link to this chat or group where I am added.\n"
            "3Ô∏è‚É£ I will download the video and send it to you or the group. üéâ"
        )
    elif lang == "vi":
        user_languages[user_id] = "vi"
        instruction = (
            "üëã Ch√†o m·ª´ng b·∫°n!\n\n"
            "üí° **T√¥i ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o:**\n"
            "1Ô∏è‚É£ Sao ch√©p li√™n k·∫øt t·ªõi video Reels t·ª´ Instagram.\n"
            "2Ô∏è‚É£ G·ª≠i li√™n k·∫øt v√†o cu·ªôc tr√≤ chuy·ªán n√†y ho·∫∑c nh√≥m.\n"
            "3Ô∏è‚É£ T√¥i s·∫Ω t·∫£i video v√† g·ª≠i n√≥ cho b·∫°n ho·∫∑c nh√≥m. üéâ"
        )
    await query.edit_message_text(instruction, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    language = user_languages.get(user_id, "ru")
    response = {
        "ru": "–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏: {text}",
        "en": "You sent: {text}",
        "vi": "B·∫°n ƒë√£ g·ª≠i: {text}",
    }.get(language, "–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏: {text}")

    await update.message.reply_text(response.format(text=update.message.text))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ Webhook –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram
@app.route("/webhook", methods=["POST"])
def webhook():
    try:
        data = request.get_json(force=True)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω Webhook: {data}")
        update = Update.de_json(data, application.bot)
        application.process_update(update)
        return "OK", 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Webhook: {e}")
        return "–û—à–∏–±–∫–∞", 500

# –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
@app.route("/", methods=["GET"])
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!", 200

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
def main():
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CallbackQueryHandler(language_callback, pattern=r"^lang_.*"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Webhook
    application.run_webhook(
        listen="0.0.0.0",  # –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        port=int(os.getenv("PORT", 8080)),  # –ü–æ—Ä—Ç –¥–ª—è Render Web Service
        webhook_url=f"{WEBHOOK_URL}/webhook",  # URL –¥–ª—è Telegram Webhook
    )

if __name__ == "__main__":
    main()
